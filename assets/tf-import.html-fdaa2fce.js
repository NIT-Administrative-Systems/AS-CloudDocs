import{_ as n,p as e,q as s,Q as o,a1 as a}from"./framework-bf3e1922.js";const t={},i=a(`<h1 id="terraform-import" tabindex="-1"><a class="header-anchor" href="#terraform-import" aria-hidden="true">#</a> Terraform Import</h1><p>Terraform can import existing infrastructure, which means you can import AWS resources created by some other method to be henceforth managed by Terraform and your IaC.</p><p>The <code>terraform import</code> command modifies the state and must be executed by an AWS Account Admin.</p><ol><li>(Developer) Write a resource block and push the code changes:</li></ol><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token comment"># Example</span>
<span class="token keyword">resource <span class="token type variable">&quot;aws_cloudwatch_log_group&quot;</span></span> <span class="token string">&quot;example&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">name</span>              <span class="token punctuation">=</span> <span class="token string">&quot;/aws/lambda/<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">var</span><span class="token punctuation">.</span><span class="token type variable">lambda_function_name</span><span class="token punctuation">}</span></span>&quot;</span>
  <span class="token property">retention_in_days</span> <span class="token punctuation">=</span> <span class="token number">14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>(Admin) Login to the AWS account with the <code>aws-adfs</code> utility; select Admin role.</li><li>(Admin) <code>terraform import</code> doesn&#39;t work with a dynamic provider config (known limitation). <ul><li>Temporarily/locally hard-code the region in the provider block:</li></ul><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token comment"># DOES NOT WORK with import command:</span>
<span class="token keyword">provider<span class="token type variable"> &quot;aws&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">region</span> <span class="token punctuation">=</span> var.region
<span class="token punctuation">}</span>

<span class="token comment"># WORKS with import command:</span>
<span class="token keyword">provider<span class="token type variable"> &quot;aws&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">region</span> <span class="token punctuation">=</span> <span class="token string">&quot;us-east-2&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>(Admin) Locally, in the <code>iac/{env}</code> directory where the state file is, run: <ol><li><code>terraform init</code></li><li><code>terraform import &lt;resource address in your IaC&gt; &lt;existing id in AWS&gt;</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Example</span>
terraform <span class="token function">import</span> module.build_lambda.aws_cloudwatch_log_group.example /aws/lambda/example-fxn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>(Developer) Build/deploy. <ul><li>Now that the existing resource is recorded in your state, <code>terraform apply</code> shouldn&#39;t yield a <code>ResourceAlreadyExistsException</code>.</li></ul></li><li>(Admin) Discard the change to hard-code the provider region.</li></ol>`,6),r=a(`<details class="hint-container details"><summary>Example Use Case: Expire Lambda Logs</summary><h3 id="scenario" tabindex="-1"><a class="header-anchor" href="#scenario" aria-hidden="true">#</a> Scenario</h3><p>AWS Lambda functions automatically store log output in Amazon CloudWatch Logs by creating a CloudWatch Logs group for your Lambda function, named <code>/aws/lambda/{lambda-function-name}</code>.</p><p>Optionally, you could explicitly manage the CloudWatch Log group for a Lambda in your IaC.</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">resource <span class="token type variable">&quot;aws_lambda_function&quot;</span></span> <span class="token string">&quot;datahub_lambda&quot;</span> <span class="token punctuation">{</span>
    <span class="token property">function_name</span>    <span class="token punctuation">=</span> var.lambda_function_name
    ...
<span class="token punctuation">}</span>

<span class="token comment"># optional </span>
<span class="token keyword">resource <span class="token type variable">&quot;aws_cloudwatch_log_group&quot;</span></span> <span class="token string">&quot;example&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">name</span>              <span class="token punctuation">=</span> <span class="token string">&quot;/aws/lambda/<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">var</span><span class="token punctuation">.</span><span class="token type variable">lambda_function_name</span><span class="token punctuation">}</span></span>&quot;</span>
  <span class="token property">retention_in_days</span> <span class="token punctuation">=</span> <span class="token number">14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Managing the Log Group in your IaC could be beneficial in order to set a log retention (logs that never expire accumulate and become difficult to search).</p><h3 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> Problem</h3><p>The log group you create via Terraform for your Lambda function must be named <code>/aws/lambda/{lambda-function-name}</code>.</p><p>If the Lambda function is already live and has already created its CloudWatch Log Group with this name, when you add the Log Group resource to your IaC, <code>terraform apply</code> will fail:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error: Creating CloudWatch Log Group failed: 
ResourceAlreadyExistsException: The specified log group already exists.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h3><p>Import the existing Log Group to attach it to your IaC. This records the existing resource in your Terraform state file so it can be henceforth managed by Terraform.</p></details>`,1);function l(c,p){return e(),s("div",null,[i,o(" the Details block does not work in IE "),r])}const u=n(t,[["render",l],["__file","tf-import.html.vue"]]);export{u as default};
