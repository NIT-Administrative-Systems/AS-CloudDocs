import{_ as l,M as i,p as d,q as c,R as e,t as n,N as s,V as r,a1 as a}from"./framework-bf3e1922.js";const p={},u=e("h1",{id:"upgrading-terraform",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#upgrading-terraform","aria-hidden":"true"},"#"),n(" Upgrading Terraform")],-1),m=e("p",null,[n("Prior to January 2020, all IaC was written in Terraform v0.10.x. One selected version of the "),e("code",null,"terraform"),n(" command was available on the Jenkins servers.")],-1),v={href:"https://www.hashicorp.com/blog/deprecating-terraform-0-11-support-in-terraform-providers/",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"strategy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#strategy","aria-hidden":"true"},"#"),n(" Strategy")],-1),f={href:"https://github.com/tfutils/tfenv",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"tfenv",-1),g=e("code",null,"virtual_env",-1),y=e("code",null,"nvm",-1),k=e("code",null,"rbenv",-1),w=e("p",null,"This utility will allow us to run multiple versions of Terraform on the same Jenkins server. Projects may be upgraded one-by-one, instead of needing all jobs on one Jenkins server to upgrade to Terraform v0.12 in unison.",-1),_=e("h2",{id:"upgrading-from-v0-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#upgrading-from-v0-10","aria-hidden":"true"},"#"),n(" Upgrading from v0.10")],-1),x=e("p",null,"The Terraform language has undergone significant changes in v0.12. It has a tool to convert your terraform files, but there are some items that cannot be automatically updated.",-1),T={href:"https://www.terraform.io/upgrade-guides/0-12.html",target:"_blank",rel:"noopener noreferrer"},I=a(`<li><p>Install the <code>tfenv</code> command on your workstation</p><p>You should remove any versions of Terraform that you had installed previously; they can be re-installed under <code>tfenv</code>&#39;s management</p></li><li><p>Create a new git branch for the upgrade</p></li><li><p>Create a <code>.terraform-version</code> file in the root of your project. This file is used by <code>tfenv</code> to determine what version to install</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> .terraform-version
latest:0.12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Install terraform by running <code>tfenv install</code> in the root of your project</p></li>`,4),S=e("p",null,[n("Run the automatic upgrade command for each folder containing "),e("code",null,".tf"),n(" files.")],-1),A=a(`<p>The upgrade tool considers these on a folder-by-folder basis. It will not follow references to other folders or remote modules.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># This is an example -- your base module &amp; envs may differ.</span>
<span class="token comment"># If you have any .tf files in the project root, make sure to do</span>
<span class="token comment"># that folder as well.</span>
$ terraform <span class="token number">0</span>.12upgrade <span class="token parameter variable">-yes</span> sandbox/
$ terraform <span class="token number">0</span>.12upgrade <span class="token parameter variable">-yes</span> nonprod/
$ terraform <span class="token number">0</span>.12upgrade <span class="token parameter variable">-yes</span> prod/

<span class="token comment"># Any modules that use providers will need those providers installed</span>
<span class="token comment"># before they can be upgraded.</span>
$ terraform init base/
$ terraform <span class="token number">0</span>.12upgrade <span class="token parameter variable">-yes</span> base/
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> base/.terraform
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$=a(`<li><p>Adjust your <code>.terraform-version</code> file again. The upgrade may have written a specific patch version, but we want on-the-fly updates for the patch version.</p><p>It should be:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> .terraform-version
latest:0.12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Remove any <code>versions.tf</code> files in your environment-specific folders.</p><p>This file tells Terraform the minimum version number the module may run on. The upgrade command will emit these for each folder it is run in.</p><p>In the interest of DRY code, we only want this file in the base module that all of the env-specific modules use. They will all inherently rely on its version specification.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># From the project root:</span>
$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> versions.tf
./prod/versions.tf
./nonprod/versions.tf
./sandbox/versions.tf
./base/versions.tf

<span class="token comment"># Leave the one in base, but remove all others:</span>
$ <span class="token function">rm</span> ./prod/versions.tf ./nonprod/versions.tf ./sandbox/versions.tf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),q=a(`<p>If you have pinned the AWS provider version for your module, review this and decide if it is appropriate to update the version.</p><p>This was done for some IaC modules. The older provider uses older AWS APIs, allowing the module to build without making changes that Amazon needs for the newer APIs.</p><p>This is a good opportunity to review and upgrade to the latest provider.</p><p>If you have pinned the provider version, it will look like this:</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">provider<span class="token type variable"> &quot;aws&quot; </span></span><span class="token punctuation">{</span>
    <span class="token comment"># Pinned to 1.33 and older</span>
    <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;&lt;= 1.13.0&quot;</span>

    <span class="token comment"># Pinned to 1.60.x</span>
    <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;~&gt; 1.60&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),j={href:"https://registry.terraform.io/providers/hashicorp/aws",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"tf-0.12",-1),W=e("code",null,"?ref=<branch name>",-1),L=a(`<div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">module<span class="token type variable"> &quot;alb&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">source</span> <span class="token punctuation">=</span> <span class="token string">&quot;github.com/NIT-Administrative-Systems/AS-Common-AWS-Modules//alb?ref=tf-0.12&quot;</span>

    <span class="token comment">// . . .</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P=a(`<li><p>Run the validator tool for each module and review your Terraform code.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> nonprod
$ terraform init <span class="token comment"># errors about the state file are expected and OK</span>
$ terraform validate
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .terraform
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fix any errors raised by the upgrade tool &amp; any other issues you identify.</p><p>Warnings will be called out when you run the upgrade command, but they will be annotated in the code as well. Look for <code>TF-UPGRADE-TODO</code> comments.</p></li>`,1),R=e("p",null,"Log in to AWS from your console and review the plan",-1),Y=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> nonprod/
$ terraform init
$ terraform plan
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .terraform
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In most cases, the plan will show no changes. There may be exceptions to this. You can review older deployments to determine if that was normal in v0.10; if it was, the v0.10 and v0.12 plans should reflect that the same resources need to change. The exceptions we know about are:</p><ul><li>API Gateway deployments may show up if a run will always re-deploy the API Gateway</li><li>Lambdas may show up if the code or dependencies have changed, since the last modified date, source code hash, and/or etag (for the zip containing the code) have changed</li></ul><p>You may not be able to generate a complete plan. If you are using encrypted SSM parameters with a custom KMS key, you will not have enough access to decrypt the values, which Terraform wants to consider for its plan.</p>`,4),N=a(`<li><p>Update your Jenkins pipeline files to use <code>tfenv</code> and auto-approve the plan</p><p>You will need a new stage before <code>terraform</code> is used to grab the correct version for your project. In the context of your <code>stages</code> block, prepend:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>stage <span class="token punctuation">(</span><span class="token string">&#39;tfenv&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    steps <span class="token punctuation">{</span>
        sh <span class="token string">&#39;tfenv install&#39;</span>
        sh <span class="token string">&#39;terraform -version&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will also need to add the <code>-auto-approve</code> flag to <code>terraform apply</code>:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>stage <span class="token punctuation">(</span><span class="token string">&#39;Existing Apply Stage&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    steps <span class="token punctuation">{</span>
        sh <span class="token string">&#39;terraform apply -auto-approve -no-color&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),V=a(`<h2 id="going-live-with-the-upgrade" tabindex="-1"><a class="header-anchor" href="#going-live-with-the-upgrade" aria-hidden="true">#</a> Going Live with the Upgrade</h2><p>Once your v0.12 changes are valid, moving the new module into production should be painless. The underlying terraform code may have been updated, but the <code>terraform plan</code> should be unchanged. No changes should be made to your infrastructure as a result of this upgrade.</p><p>After you run <code>terraform apply</code> with the new version of terraform, that module&#39;s <code>tfstate</code> is updated. This occurs even if the <code>terraform apply</code> command fails to fully execute. You cannot revert to a older version of terraform. This is applicable even for minor version bumps (e.g. 0.12.19 to 0.12.20).</p><h2 id="vs-code-support" tabindex="-1"><a class="header-anchor" href="#vs-code-support" aria-hidden="true">#</a> VS Code Support</h2><p>If you are using the Terraform VS Code extension, you will need to make adjustments to its configuration so it will work with the v0.12 language changes.</p><p>In your VS Code setting JSON file, set these options:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// . . .</span>
    <span class="token property">&quot;terraform.indexing.enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;terraform.languageServer.enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Restart VS Code. It should prompt you to install &amp; run the Terraform Language Server. Once complete, you should regain the full use of the extension.</p>`,8);function J(O,U){const o=i("ExternalLinkIcon"),t=i("RouterLink");return d(),c("div",null,[u,m,e("p",null,[n("The v0.10 series has reached the end of its useful life: the AWS provider will "),e("a",v,[n("no longer be updated"),s(o)]),n(" for Terraform 0.11 and older. Without active support on the AWS provider, new AWS features will be unavailable to us. As time goes on, AWS API changes may leave existing IaC modules broken & unable to build.")]),h,e("p",null,[n("A utility called "),e("a",f,[b,s(o)]),n(" is available on the Jenkins servers. This is similar to Python's "),g,n(", Node's "),y,n(", or Ruby's "),k,n(". It allows you to select a specific version of Terraform on a per-project basis.")]),w,_,x,e("p",null,[n("You should carefully review "),e("a",T,[n("the official upgrade guide"),s(o)]),n(" and identify any features you are using that may require your attention before you undertake an upgrade.")]),e("ol",null,[I,e("li",null,[S,e("p",null,[n("The "),s(t,{to:"/iac/as-tf-modules.html"},{default:r(()=>[n("recommended module structure")]),_:1}),n(" dictates that all env-specific modules use the same 'base' code. This means all the env-specific modules must be upgraded alongside it. You cannot piecemeal this step.")]),A]),$,e("li",null,[q,e("p",null,[n("You should at least migrate to the 2.x provider. The latest version can be found on the "),e("a",j,[n("Terraform registry"),s(o)]),n(". If you move to the latest evrsion, you can set up Dependabot for the repository and receive pull requests when new versions of the provider are available.")])]),e("li",null,[e("p",null,[n("If you are using any of the "),s(t,{to:"/iac/available-modules.html"},{default:r(()=>[n("AS shared modules")]),_:1}),n(", you will need to use their "),C,n(" branch. All you need to do is add/update "),W,n(" in the git URLs.")]),L]),P,e("li",null,[R,e("p",null,[n("You can use the "),s(t,{to:"/iac/terraform-concepts.html#developing-testing-iac"},{default:r(()=>[n("aws-adfs tool")]),_:1}),n(" to log in to AWS on your console. Select the correct account (e.g. planning dev = nonprod AWS account) when logging in.")]),Y]),N]),V])}const D=l(p,[["render",J],["__file","tf-upgrading.html.vue"]]);export{D as default};
