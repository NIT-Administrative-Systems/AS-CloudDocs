import{_ as s,M as o,p as r,q as d,R as n,t,N as c,V as u,a1 as e}from"./framework-bf3e1922.js";const i={},l=e(`<h1 id="state-bucket-reference" tabindex="-1"><a class="header-anchor" href="#state-bucket-reference" aria-hidden="true">#</a> State Bucket Reference</h1><p>These are the state buckets for various accounts:</p><table><thead><tr><th>Account</th><th>Bucket Name</th></tr></thead><tbody><tr><td>DMA Sandbox</td><td>as-dma-sbx-tfstate</td></tr><tr><td>DMA Nonprod</td><td>as-dma-nonprod-tfstate</td></tr><tr><td>DMA Production</td><td>nit-et-ia-build-tfstate</td></tr><tr><td>ADO Sandbox</td><td>as-ado-sbx-tfstate</td></tr><tr><td>ADO Nonprod</td><td>ado-nonprod-build-tfstate</td></tr><tr><td>ADO Production</td><td>ado-prod-build-tfstate</td></tr></tbody></table><p>Your <code>state.tf</code> file should look like this:</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">terraform</span> <span class="token punctuation">{</span>
  <span class="token keyword">backend<span class="token type variable"> &quot;s3&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">bucket</span> <span class="token punctuation">=</span> <span class="token string">&quot;&lt;bucket name for acct&gt;&quot;</span>
    <span class="token property">key</span>    <span class="token punctuation">=</span> <span class="token string">&quot;&lt;app name&gt;/&lt;environment&gt;/terraform.tfstate&quot;</span>
    <span class="token property">region</span> <span class="token punctuation">=</span> <span class="token string">&quot;us-east-2&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shared-resource-state" tabindex="-1"><a class="header-anchor" href="#shared-resource-state" aria-hidden="true">#</a> Shared Resource State</h2>`,6),p=e("<p>The bucket name &amp; region is the same as your account state bucket. Here are the S3 keys:</p><table><thead><tr><th>Account</th><th>S3 Object Key</th></tr></thead><tbody><tr><td>DMA Sandbox</td><td><em>Not available</em></td></tr><tr><td>DMA Nonprod</td><td><code>dma-shared-resources/nonprod/terraform.tfstate</code></td></tr><tr><td>DMA Production</td><td><code>dma-shared-resources/prod/terraform.tfstate</code></td></tr><tr><td>ADO Sandbox</td><td><code>as-ado-sbx-resources/sandbox/terraform.tfstate</code></td></tr><tr><td>ADO Nonprod</td><td><code>ado-shared-resources/nonprod/terraform.tfstate</code></td></tr><tr><td>ADO Production</td><td><code>ado-shared-resources/prod/terraform.tfstate</code></td></tr></tbody></table><p>If you want to review the available outputs, the easiest way is to look at the output stage on the Jenkins job. The jobs that build shared resources are in the CloudOps folder -&gt; <em>DeptName</em> Shared Resources.</p>",3);function h(b,m){const a=o("RouterLink");return r(),d("div",null,[l,n("p",null,[t("Each AWS account has a set of shared resources maintained by the EACD-CloudOps team. The state for these resources has outputs that you can load in your own TF modules, as illustrated by the "),c(a,{to:"/iac/example-tf.html"},{default:u(()=>[t("Example Terraform Module")]),_:1}),t(" article.")]),p])}const k=s(i,[["render",h],["__file","state-buckets.html.vue"]]);export{k as default};
