import{_ as r,M as i,p as c,q as l,R as n,t as s,N as a,V as o,a1 as p}from"./framework-bf3e1922.js";const u="/AS-CloudDocs/assets/jenkins-cred-list-734991ec.png",d="/AS-CloudDocs/assets/jenkins-cred-entry-434614ac.png",k={},m=n("h1",{id:"secret-management",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#secret-management","aria-hidden":"true"},"#"),s(" Secret Management")],-1),v=n("p",null,"Jenkins cannot share its credential store with other applications & services, but provides a convenient way for developers to manage secrets right alongside their infrastructure and app builds. To faciliate using credentials, the secrets kept in Jenkins should be published to the AWS Systems Manager (SSM) Paramater Store as encrypted values.",-1),h={href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"The SSM parameter store can hold other, not-secret config values too. That is beyond the scope of this article.",-1),b=n("h2",{id:"strategy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#strategy","aria-hidden":"true"},"#"),s(" Strategy")],-1),g=n("p",null,[s("All Jenkins jobs are sorted into folders. Folders provide a security boundry for credentials: "),n("em",null,"only"),s(" jobs inside a folder can access credentials scoped to the folder. This way, an 'HR Enterprise' job would not have access to a 'Student Enterprise' credential. Groups of developers can be assigned permission to create/update/delete credentials for their folders.")],-1),_={href:"https://github.com/NIT-Administrative-Systems/jenkins-credential-sync-test",target:"_blank",rel:"noopener noreferrer"},f=p('<h3 id="jenkins-setup" tabindex="-1"><a class="header-anchor" href="#jenkins-setup" aria-hidden="true">#</a> Jenkins Setup</h3><p>To create credentials in Jenkins, click into your folder &gt; Credentials &gt; Folder, and then select Global Credentials. You can add or update the credentials here.</p><p><img src="'+u+'" alt="Jenkins credential list screen"></p><p>When creating a credential, choose the secret text type. Make sure you specify the ID as a name you&#39;ll use for the SSM parameter. If you do not specify the ID, Jenkins will generate a UUID. You can go back and edit that so it&#39;s a descriptive label.</p><p><img src="'+d+`" alt="Jenkins credential entry screen"></p><h3 id="terraform-setup" tabindex="-1"><a class="header-anchor" href="#terraform-setup" aria-hidden="true">#</a> Terraform Setup</h3><p>The SSM parameter resources should be created by Terraform as IaC. The easiest way to do this is specifying a template resource and putting your parameter names in an array. The parameter names should be emitted as an output from your Terraform modules.</p><p>You may optionally create an application-specific encryption key for your secrets. This is free and has no downsides, so it is recommended to do so.</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token comment"># Make this a list of your secrets. These names should match the Jenkins credential IDs.</span>
<span class="token keyword">locals</span> <span class="token punctuation">{</span>
    <span class="token property">parameters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;jcst-demo-api-key&quot;</span>, <span class="token string">&quot;jcst-password&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># This will create two resources; one for each entry in the parameters array.</span>
<span class="token comment"># You should customize the name for your app. </span>
<span class="token comment"># SSM is a a hierarchy, so &quot;/your-app/env&quot; is a good prefix!</span>
<span class="token keyword">resource <span class="token type variable">&quot;aws_ssm_parameter&quot;</span></span> <span class="token string">&quot;secure_param&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">count</span> <span class="token punctuation">=</span> length(local.parameters)

  <span class="token property">name</span>        <span class="token punctuation">=</span> <span class="token string">&quot;/jenkins-ssm-sync/tech-demo/<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">local</span><span class="token punctuation">.</span><span class="token type variable">parameters</span><span class="token punctuation">[</span><span class="token keyword">count</span><span class="token punctuation">.</span><span class="token type variable">index</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;</span>
  <span class="token property">description</span> <span class="token punctuation">=</span> <span class="token string">&quot;Demo secret: <span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">local</span><span class="token punctuation">.</span><span class="token type variable">parameters</span><span class="token punctuation">[</span><span class="token keyword">count</span><span class="token punctuation">.</span><span class="token type variable">index</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;</span>
  <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">&quot;SecureString&quot;</span>
  <span class="token property">value</span>       <span class="token punctuation">=</span> <span class="token string">&quot;SSM parameter store not populated from Jenkins&quot;</span>
  <span class="token property">key_id</span>      <span class="token punctuation">=</span> aws_kms_key.key.arn

  <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span>
    <span class="token property">environment</span> <span class="token punctuation">=</span> <span class="token string">&quot;tech-demo&quot;</span>
  <span class="token punctuation">}</span>

  <span class="token comment"># The parameter will be created with a dummy value. Jenkins will update it with </span>
  <span class="token comment"># the final value in a subsequent pipeline step.</span>
  <span class="token comment">#</span>
  <span class="token comment"># TF will not override the parameter once it has been created.</span>
  <span class="token keyword">lifecycle</span> <span class="token punctuation">{</span>
    <span class="token property">ignore_changes</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">output<span class="token type variable"> &quot;parameters&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">value</span> <span class="token punctuation">=</span> zipmap(local.parameters, slice(aws_ssm_parameter.secure_param.*.name, <span class="token number">0</span>, length(local.parameters)))
<span class="token punctuation">}</span>

<span class="token keyword">resource <span class="token type variable">&quot;aws_kms_key&quot;</span></span> <span class="token string">&quot;key&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">description</span> <span class="token punctuation">=</span> <span class="token string">&quot;Key for encrypting demo config&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will create two encrypted SSM parameters with dummy values.</p><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline" aria-hidden="true">#</a> Pipeline</h3>`,11),q=n("code",null,"publishSecretsToSSM",-1),w=p(`<p>You should do this in your infrastructure pipeline: the function depends on the Terraform module being initialized &amp; applied, with the <code>parameters</code> output available. If your application has strong reasons to do this in another pipeline, ensure the infrastructure module has been <code>terraform init</code>-ed first.</p><p>&lt;&lt;&lt; @/assets/sample-secret-pipeline.groovy</p><h2 id="using-secrets" tabindex="-1"><a class="header-anchor" href="#using-secrets" aria-hidden="true">#</a> Using Secrets</h2><p>Here are some notes on common ways to use SSM secrets.</p><p>In all cases, the service will need to be given access to the KMS key before it can decrypt parameters -- granting your application access to an encrypted SSM parameter without the key will result in errors when you attempt to access the secret!</p><p>Here is an example policy, based on the parameter example above:</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">data <span class="token type variable">&quot;aws_iam_policy_document&quot;</span></span> <span class="token string">&quot;lambda_secrets_policy&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">statement</span> <span class="token punctuation">{</span>
    <span class="token property">effect</span>    <span class="token punctuation">=</span> <span class="token string">&quot;Allow&quot;</span>
    <span class="token property">actions</span>   <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ssm:GetParameters&quot;</span>, <span class="token string">&quot;ssm:GetParameter&quot;</span><span class="token punctuation">]</span>
    <span class="token property">resources</span> <span class="token punctuation">=</span> aws_ssm_parameter.secure_param.*.arn
  <span class="token punctuation">}</span>

  <span class="token keyword">statement</span> <span class="token punctuation">{</span>
    <span class="token property">effect</span>    <span class="token punctuation">=</span> <span class="token string">&quot;Allow&quot;</span>
    <span class="token property">actions</span>   <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;kms:Decrypt&quot;</span><span class="token punctuation">]</span>
    <span class="token property">resources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>aws_kms_key.key.arn<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">resource <span class="token type variable">&quot;aws_iam_role_policy&quot;</span></span> <span class="token string">&quot;lambda_secrets_policy&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">name</span>   <span class="token punctuation">=</span> <span class="token string">&quot;SomeApp-Env-Secrets&quot;</span>
  <span class="token property">policy</span> <span class="token punctuation">=</span> data.aws_iam_policy_document.lambda_secrets_policy.json

  <span class="token comment"># Your Lambda/ECS/etc execution role name</span>
  <span class="token property">role</span> <span class="token punctuation">=</span> <span class="token string">&quot;. . .&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-the-console" tabindex="-1"><a class="header-anchor" href="#in-the-console" aria-hidden="true">#</a> In the Console</h3><p>By default, the KMS encryption key that you create will not be usable. You will grant your Lambda/ECS/etc <code>kms:Decrypt</code> access, but if you want to review your secrets in the console or use them from the CLI, there is an additional step -- granting the developer role you access AWS with access.</p><p>To avoid exposing secrets to other teams in your department, this access it not automatically granted. The <a href="#using-secrets">example IAM policy above</a> could specify your login group&#39;s name instead of an execution role name, in order to enable decryption in the AWS Console.</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">data <span class="token type variable">&quot;aws_iam_role&quot;</span></span> <span class="token string">&quot;developers&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;as-ado-sbx-Devs-EACD&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">resource <span class="token type variable">&quot;aws_iam_role_policy&quot;</span></span> <span class="token string">&quot;lambda_secrets_policy&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">name</span>   <span class="token punctuation">=</span> <span class="token string">&quot;SomeApp-SomeEnv-DeveloperDecryptSecrets&quot;</span>
  <span class="token property">role</span>   <span class="token punctuation">=</span> data.aws_iam_role.developers.name
  <span class="token property">policy</span> <span class="token punctuation">=</span> data.aws_iam_policy_document.lambda_secrets_policy.json
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),S=n("h3",{id:"ecs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ecs","aria-hidden":"true"},"#"),s(" ECS")],-1),x={href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"secrets",-1),j=p(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;cpu&quot;</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token property">&quot;memory&quot;</span><span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-cool-task&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;portMappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token property">&quot;containerPort&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
        <span class="token property">&quot;hostPort&quot;</span><span class="token operator">:</span> <span class="token number">80</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;essential&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${aws_ecr_repository.my_ecr.repository_url}:latest&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;secrets&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${local.ssm_params[0]}&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;valueFrom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${aws_ssm_parameter.secure_param.0.arn}&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h3><p>Lambda does not have a native integration for SSM parameters. However, AWS offers SDKs for most languages: Python, Java, PHP, etc. that are all similar.</p><p>Here is an example using the AWS Javascript SDK:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">AWS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;aws-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ssm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AWS<span class="token punctuation">.</span>SSM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token string">&#39;us-east-2&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ssmResponse <span class="token operator">=</span> <span class="token keyword">await</span> ssm<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">Name</span><span class="token operator">:</span> <span class="token string">&#39;/jenkins-ssm-sync/tech-demo/jcst-password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">WithDecryption</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> ssmResponse<span class="token punctuation">.</span>Parameter<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are scheduling a Lambda to be run through CloudWatch or a Step Function, you can use Terraform to inject the full parameter name into the event that invokes the Lambda. Then you won&#39;t need to worry about keeping the parameter names in sync between SSM and your codebase.</p>`,6);function M(A,C){const e=i("RouterLink"),t=i("ExternalLinkIcon");return c(),l("div",null,[m,n("p",null,[s("Secrets like usernames, passwords, API keys, and private keys should be kept in Jenkins. They should not be hard-coded and included in a "),a(e,{to:"/github/policies.html#secrets"},{default:o(()=>[s("GitHub repository")]),_:1}),s(", nor hard-coded into Jenkins pipelines or Docker images.")]),v,n("p",null,[s("The SSM paramater store securely store secrets for use by your apps and other infrastructure. It has first-class integration for some services -- for example, the Elastic Container Service (ECS) can "),n("a",h,[s("decrypt and inject secrets from SSM automatically upon booting a container"),a(t)]),s(". For services that do not offer this integration, the AWS SDK can be used to access & decrypt secrets in your application code.")]),y,b,g,n("p",null,[s("There is a working demo of this strategy available in the "),n("a",_,[s("jenkins-credential-sync-test repository"),a(t)]),s(".")]),f,n("p",null,[s("As part of your pipeline, you will want to call the "),a(e,{to:"/ci-cd/shared-libs.html"},{default:o(()=>[q,s(" function from our shared Jenkins library")]),_:1}),s(".")]),w,n("p",null,[s("The IAM article "),a(e,{to:"/infrastructure/iam.html#developer-roles"},{default:o(()=>[s("has a list of available roles")]),_:1}),s(".")]),S,n("p",null,[s("In your ECS "),n("a",x,[s("task definition"),a(t)]),s(", you can specify a "),T,s(" section with the ARNs for your parameters. They will automatically be decrypted and injected into your container as environment variables when it is started:")]),j])}const D=r(k,[["render",M],["__file","secrets.html.vue"]]);export{D as default};
