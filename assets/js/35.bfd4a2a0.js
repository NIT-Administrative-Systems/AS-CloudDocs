(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{396:function(e,t,a){"use strict";a.r(t);var r=a(41),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"upgrading-terraform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upgrading-terraform"}},[e._v("#")]),e._v(" Upgrading Terraform")]),e._v(" "),a("p",[e._v("Prior to January 2020, all IaC was written in Terraform v0.10.x. One selected version of the "),a("code",[e._v("terraform")]),e._v(" command was available on the Jenkins servers.")]),e._v(" "),a("p",[e._v("The v0.10 series has reached the end of its useful life: the AWS provider will "),a("a",{attrs:{href:"https://www.hashicorp.com/blog/deprecating-terraform-0-11-support-in-terraform-providers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("no longer be updated"),a("OutboundLink")],1),e._v(" for Terraform 0.11 and older. Without active support on the AWS provider, new AWS features will be unavailable to us. As time goes on, AWS API changes may leave existing IaC modules broken & unable to build.")]),e._v(" "),a("h2",{attrs:{id:"strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strategy"}},[e._v("#")]),e._v(" Strategy")]),e._v(" "),a("p",[e._v("A utility called "),a("a",{attrs:{href:"https://github.com/tfutils/tfenv",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("tfenv")]),a("OutboundLink")],1),e._v(" is available on the Jenkins servers. This is similar to Python's "),a("code",[e._v("virtual_env")]),e._v(", Node's "),a("code",[e._v("nvm")]),e._v(", or Ruby's "),a("code",[e._v("rbenv")]),e._v(". It allows you to select a specific version of Terraform on a per-project basis.")]),e._v(" "),a("p",[e._v("This utility will allow us to run multiple versions of Terraform on the same Jenkins server. Projects may be upgraded one-by-one, instead of needing all jobs on one Jenkins server to upgrade to Terraform v0.12 in unison.")]),e._v(" "),a("h2",{attrs:{id:"upgrading-from-v0-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upgrading-from-v0-10"}},[e._v("#")]),e._v(" Upgrading from v0.10")]),e._v(" "),a("p",[e._v("The Terraform language has undergone significant changes in v0.12. It has a tool to convert your terraform files, but there are some items that cannot be automatically updated.")]),e._v(" "),a("p",[e._v("You should carefully review "),a("a",{attrs:{href:"https://www.terraform.io/upgrade-guides/0-12.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("the official upgrade guide"),a("OutboundLink")],1),e._v(" and identify any features you are using that may require your attention before you undertake an upgrade.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Install the "),a("code",[e._v("tfenv")]),e._v(" command on your workstation")]),e._v(" "),a("p",[e._v("You should remove any versions of Terraform that you had installed previously; they can be re-installed under "),a("code",[e._v("tfenv")]),e._v("'s management")])]),e._v(" "),a("li",[a("p",[e._v("Create a new git branch for the upgrade")])]),e._v(" "),a("li",[a("p",[e._v("Create a "),a("code",[e._v(".terraform-version")]),e._v(" file in the root of your project. This file is used by "),a("code",[e._v("tfenv")]),e._v(" to determine what version to install")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" .terraform-version\nlatest:0.12\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Install terraform by running "),a("code",[e._v("tfenv install")]),e._v(" in the root of your project")])]),e._v(" "),a("li",[a("p",[e._v("Run the automatic upgrade command for each folder containing "),a("code",[e._v(".tf")]),e._v(" files.")]),e._v(" "),a("p",[e._v("The "),a("RouterLink",{attrs:{to:"/iac/as-tf-modules.html"}},[e._v("recommended module structure")]),e._v(" dictates that all env-specific modules use the same 'base' code. This means all the env-specific modules must be upgraded alongside it. You cannot piecemeal this step.")],1),e._v(" "),a("p",[e._v("The upgrade tool considers these on a folder-by-folder basis. It will not follow references to other folders or remote modules.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is an example -- your base module & envs may differ.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you have any .tf files in the project root, make sure to do")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that folder as well.")]),e._v("\n$ terraform "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".12upgrade -yes sandbox/\n$ terraform "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".12upgrade -yes nonprod/\n$ terraform "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".12upgrade -yes prod/\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Any modules that use providers will need those providers installed")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# before they can be upgraded.")]),e._v("\n$ terraform init base/\n$ terraform "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".12upgrade -yes base/\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf base/.terraform\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Adjust your "),a("code",[e._v(".terraform-version")]),e._v(" file again. The upgrade may have written a specific patch version, but we want on-the-fly updates for the patch version.")]),e._v(" "),a("p",[e._v("It should be:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" .terraform-version\nlatest:0.12\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Remove any "),a("code",[e._v("versions.tf")]),e._v(" files in your environment-specific folders.")]),e._v(" "),a("p",[e._v("This file tells Terraform the minimum version number the module may run on. The upgrade command will emit these for each folder it is run in.")]),e._v(" "),a("p",[e._v("In the interest of DRY code, we only want this file in the base module that all of the env-specific modules use. They will all inherently rely on its version specification.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# From the project root:")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -name versions.tf\n./prod/versions.tf\n./nonprod/versions.tf\n./sandbox/versions.tf\n./base/versions.tf\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Leave the one in base, but remove all others:")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" ./prod/versions.tf ./nonprod/versions.tf ./sandbox/versions.tf\n")])])])]),e._v(" "),a("li",[a("p",[e._v("If you have pinned the AWS provider version for your module, review this and decide if it is appropriate to update the version.")]),e._v(" "),a("p",[e._v("This was done for some IaC modules. The older provider uses older AWS APIs, allowing the module to build without making changes that Amazon needs for the newer APIs.")]),e._v(" "),a("p",[e._v("This is a good opportunity to review and upgrade to the latest provider.")]),e._v(" "),a("p",[e._v("If you have pinned the provider version, it will look like this:")]),e._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("provider"),a("span",{pre:!0,attrs:{class:"token type variable"}},[e._v(' "aws" ')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pinned to 1.33 and older")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("version")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<= 1.13.0"')]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pinned to 1.60.x")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("version")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"~> 1.60"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("You should at least migrate to the 2.x provider. The latest version can be found on the "),a("a",{attrs:{href:"https://registry.terraform.io/providers/hashicorp/aws",target:"_blank",rel:"noopener noreferrer"}},[e._v("Terraform registry"),a("OutboundLink")],1),e._v(". If you move to the latest evrsion, you can set up Dependabot for the repository and receive pull requests when new versions of the provider are available.")])]),e._v(" "),a("li",[a("p",[e._v("If you are using any of the "),a("RouterLink",{attrs:{to:"/iac/available-modules.html"}},[e._v("AS shared modules")]),e._v(", you will need to use their "),a("code",[e._v("tf-0.12")]),e._v(" branch. All you need to do is add/update "),a("code",[e._v("?ref=<branch name>")]),e._v(" in the git URLs.")],1),e._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("module"),a("span",{pre:!0,attrs:{class:"token type variable"}},[e._v(' "alb" ')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("source")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"github.com/NIT-Administrative-Systems/AS-Common-AWS-Modules//alb?ref=tf-0.12"')]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// . . .")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Run the validator tool for each module and review your Terraform code.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" nonprod\n$ terraform init "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# errors about the state file are expected and OK")]),e._v("\n$ terraform validate\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf .terraform\n")])])]),a("p",[e._v("Fix any errors raised by the upgrade tool & any other issues you identify.")]),e._v(" "),a("p",[e._v("Warnings will be called out when you run the upgrade command, but they will be annotated in the code as well. Look for "),a("code",[e._v("TF-UPGRADE-TODO")]),e._v(" comments.")])]),e._v(" "),a("li",[a("p",[e._v("Log in to AWS from your console and review the plan")]),e._v(" "),a("p",[e._v("You can use the "),a("RouterLink",{attrs:{to:"/iac/terraform-concepts.html#developing-testing-iac"}},[e._v("aws-adfs tool")]),e._v(" to log in to AWS on your console. Select the correct account (e.g. planning dev = nonprod AWS account) when logging in.")],1),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" nonprod/\n$ terraform init\n$ terraform plan\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf .terraform\n")])])]),a("p",[e._v("In most cases, the plan will show no changes. There may be exceptions to this. You can review older deployments to determine if that was normal in v0.10; if it was, the v0.10 and v0.12 plans should reflect that the same resources need to change. The exceptions we know about are:")]),e._v(" "),a("ul",[a("li",[e._v("API Gateway deployments may show up if a run will always re-deploy the API Gateway")]),e._v(" "),a("li",[e._v("Lambdas may show up if the code or dependencies have changed, since the last modified date, source code hash, and/or etag (for the zip containing the code) have changed")])]),e._v(" "),a("p",[e._v("You may not be able to generate a complete plan. If you are using encrypted SSM parameters with a custom KMS key, you will not have enough access to decrypt the values, which Terraform wants to consider for its plan.")])]),e._v(" "),a("li",[a("p",[e._v("Update your Jenkins pipeline files to use "),a("code",[e._v("tfenv")]),e._v(" and auto-approve the plan")]),e._v(" "),a("p",[e._v("You will need a new stage before "),a("code",[e._v("terraform")]),e._v(" is used to grab the correct version for your project. In the context of your "),a("code",[e._v("stages")]),e._v(" block, prepend:")]),e._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[e._v("stage "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'tfenv'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    steps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        sh "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'tfenv install'")]),e._v("\n        sh "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'terraform -version'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("You will also need to add the "),a("code",[e._v("-auto-approve")]),e._v(" flag to "),a("code",[e._v("terraform apply")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[e._v("stage "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Existing Apply Stage'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    steps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        sh "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'terraform apply -auto-approve -no-color'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"going-live-with-the-upgrade"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#going-live-with-the-upgrade"}},[e._v("#")]),e._v(" Going Live with the Upgrade")]),e._v(" "),a("p",[e._v("Once your v0.12 changes are valid, moving the new module into production should be painless. The underlying terraform code may have been updated, but the "),a("code",[e._v("terraform plan")]),e._v(" should be unchanged. No changes should be made to your infrastructure as a result of this upgrade.")]),e._v(" "),a("p",[e._v("After you run "),a("code",[e._v("terraform apply")]),e._v(" with the new version of terraform, that module's "),a("code",[e._v("tfstate")]),e._v(" is updated. This occurs even if the "),a("code",[e._v("terraform apply")]),e._v(" command fails to fully execute. You cannot revert to a older version of terraform. This is applicable even for minor version bumps (e.g. 0.12.19 to 0.12.20).")]),e._v(" "),a("h2",{attrs:{id:"vs-code-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-support"}},[e._v("#")]),e._v(" VS Code Support")]),e._v(" "),a("p",[e._v("If you are using the Terraform VS Code extension, you will need to make adjustments to its configuration so it will work with the v0.12 language changes.")]),e._v(" "),a("p",[e._v("In your VS Code setting JSON file, set these options:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// . . .")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"terraform.indexing.enabled"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"terraform.languageServer.enabled"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Restart VS Code. It should prompt you to install & run the Terraform Language Server. Once complete, you should regain the full use of the extension.")])])}),[],!1,null,null,null);t.default=s.exports}}]);