(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{406:function(t,a,s){"use strict";s.r(a);var n=s(41),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"lambda"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda"}},[t._v("#")]),t._v(" Lambda")]),t._v(" "),s("p",[t._v("Lambda is the AWS serverless compute platform.")]),t._v(" "),s("h2",{attrs:{id:"public-cloud-vs-vpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-cloud-vs-vpc"}},[t._v("#")]),t._v(" Public Cloud vs. VPC")]),t._v(" "),s("p",[t._v("By default, Lambdas will run on AWS' public infrastructure. It will be given an IP from AWS' general pool, and it will not have access to campus datacenter resources over the VPN.")]),t._v(" "),s("p",[t._v("If you don't think your Lambda will ever need VPN access, this is fine. Running this way reduces the complexity of your infrastructure.")]),t._v(" "),s("p",[t._v("If you do need access to campus resources, you will need to specify the VPC ID, "),s("RouterLink",{attrs:{to:"/infrastructure/vpc-ip-addr.html"}},[t._v("obtain subnets")]),t._v(", and give your Lambda some "),s("a",{attrs:{href:"#running-in-the-vpc"}},[t._v("additional network permissions")]),t._v(".")],1),t._v(" "),s("h2",{attrs:{id:"execution-role"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#execution-role"}},[t._v("#")]),t._v(" Execution Role")]),t._v(" "),s("p",[t._v("Lambdas assume an IAM role when they run. This role is what governs their access to other AWS services like CloudWatch (for logging) or DyanmoDB (for your data).")]),t._v(" "),s("h3",{attrs:{id:"cloudwatch-logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cloudwatch-logs"}},[t._v("#")]),t._v(" CloudWatch Logs")]),t._v(" "),s("p",[t._v("Every Lambda should be given access to write its console output to CloudWatch. There are two best practices we recommend here:")]),t._v(" "),s("ol",[s("li",[t._v("Explicitly create your CloudWatch log groups with a retention policy")]),t._v(" "),s("li",[t._v("Only grant your Lambda access to the necessary log groups")])]),t._v(" "),s("p",[t._v("If you do not explicitly create the log group, AWS may create it for you implicitly. This is problematic later on: you will eventually want to set up a retention policy so the logs aren't kept forever, but Terraform won't be able to create the group since it already exists. If this has already happened, contact the EACD-CloudOps team and they can help "),s("RouterLink",{attrs:{to:"/iac/tf-import.html"}},[t._v("import the resource into terraform")]),t._v(".")],1),t._v(" "),s("p",[t._v("Your IAM role is probably too broad if it's able to create the log group too: you may have granted your Lambda access to something like "),s("code",[t._v("logs:*/*")]),t._v(", which will cover every log group in the account. "),s("RouterLink",{attrs:{to:"/infrastructure/iam.html"}},[t._v("This is not permitted")]),t._v(" in AS, but older IaC modules may have been implemented this way.")],1),t._v(" "),s("p",[t._v("Here is a working Terraform example that implements these recommendations:")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Role for the Lambda to assume")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("resource "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_iam_role"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_execution_role"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("lambda_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("-lambda-execution-"),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("assume_role_policy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" data.aws_iam_policy_document.lambda_execution_role.json\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("description")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" - "),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("lambda_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(' Lambda Execution Role"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Boilterplate-y policy that allows Lambda to assume this role")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_iam_policy_document"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_execution_role"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("statement")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("effect")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allow"')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("principals")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Service"')]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("identifiers")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda.amazonaws.com"')]),t._v(",\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("actions")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sts:AssumeRole"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Log group name **MUST** match the Lambda's name")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is just how Lambda works, you cannot overwrite/change the group your Lambda will log to.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("resource "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_cloudwatch_log_group"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_log_group"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/aws/lambda/'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("lambda_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("-"),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set to whatever is appropriate for your project")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("retention_in_days")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CloudWatch log policy")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_iam_policy_document"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_access_policy"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("statement")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("effect")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allow"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("actions")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"logs:CreateLogStream"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"logs:PutLogEvents"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("resources")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" aws_cloudwatch_log_group.lambda_log_group.arn\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You could include other statements too (KMS/SSM, network interface stuff, SES, etc)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Attach the policy to the role")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("resource "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_iam_role_policy"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_kms_policy"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("lambda_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("-lambda-kms-policy-"),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("role")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" aws_iam_role.lambda_execution_role.id\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("policy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" data.aws_iam_policy_document.lambda_access_policy.json\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The Lambda itself")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("resource "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_lambda_function"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app_lambda"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("function_name")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("lambda_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("-"),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("role")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" aws_iam_role.lambda_execution_role.arn\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# . . . and all the other settings you need")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"running-in-the-vpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-in-the-vpc"}},[t._v("#")]),t._v(" Running in the VPC")]),t._v(" "),s("p",[t._v("If your Lambda is going to "),s("RouterLink",{attrs:{to:"/infrastructure/vpc-ip-addr.html"}},[t._v("run in the VPC")]),t._v(' so it has VPN access to the campus datacenters, you will need to give it some of the EC2 network permissions. This may seem counter-intuitive -- Lambda isn\'t EC2 -- but all of the network interface stuff is "part" of the EC2 service.')],1),t._v(" "),s("p",[t._v("Here is a policy document you can attach to your Lambda's execution role. This is a rare situation in which granting something access to "),s("code",[t._v("*")]),t._v(" is acceptable:")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data "),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v('"aws_iam_policy_document"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lambda_access_policy"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("statement")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("effect")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allow"')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("actions")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ec2:CreateNetworkInterface"')]),t._v(",\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ec2:DescribeNetworkInterfaces"')]),t._v(",\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ec2:DeleteNetworkInterface"')]),t._v(",\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ec2:DetachNetworkInterface"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("resources")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);