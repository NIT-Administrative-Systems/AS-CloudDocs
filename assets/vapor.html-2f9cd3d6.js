import{_ as l,M as p,p as r,q as c,R as s,t as n,N as a,V as o,a1 as t}from"./framework-bf3e1922.js";const u={},d=s("h1",{id:"laravel-vapor",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#laravel-vapor","aria-hidden":"true"},"#"),n(" Laravel Vapor")],-1),v={href:"https://vapor.laravel.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.vapor.build/1.0/introduction.html#what-is-vapor",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"If you would like to use Vapor, contact the EACD-CloudOps team for access.",-1),h=s("h2",{id:"implementation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#implementation","aria-hidden":"true"},"#"),n(" Implementation")],-1),k=t("<p>The initial setup for an application requires you to:</p><ul><li>Create a project (in prod &amp; nonprod)</li><li>Create any optional resources (RDS instances / elasticache clusters)</li><li>Generate certificate request(s) for each environment &amp; validate them (make sure your vapor CLI is logged in to the proper team <code>vapor team:current</code> to switch the team <code>vapor team:switch</code>) <ul><li><code>vapor cert my-subdomain.northwestern.edu</code> from the CLI w/ subsequent request to SOC for the validation records</li></ul></li></ul><p>Vapor natively supports RDS. For smaller applications &amp; dev/test environments, you can use RDS Aurora Serverless at cost similar to DyanmoDB.</p><p>You are free to terraform additional AWS resources (e.g. DynamoDB tables) for use by your application. The AWS PHP SDK can be used from your app to access these additional resources.</p>",4),g={href:"https://docs.vapor.build/",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"vapor.yml",-1),y=t(`<p>If adding a new environment to a branch (like playground env to prod branch):</p><ol><li>Use the CLI to set up the new environment in the appropriate vapor account (This can currently only be done via the CLI.):</li></ol><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>	./vendor/bin/vapor team:switch			To switch to the correct vapor account
	./vendor/bin/vapor env playground		WHERE &#39;playground&#39; is the name of the new environment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Then update the vapor.yml to include the new environment, for the initial build COMMENT OUT seeding and imports, as the vapor command sequence doesn&#39;t validate before it tries to run, causing an error.</li></ol><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>For Example:
	<span class="token key attr-name">- &#39;php artisan db:seed --class</span><span class="token punctuation">=</span><span class="token value attr-value">\\\\Database\\\\Seeders\\\\StakeholderSeeder --force&#39;</span>
	- &#39;php artisan import:example:update&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>After inital build, go back into the vapor.yml and UNCOMMENT the seeding and imports lines from step 2.</p></li><li><p>All total, you will send three requests to the SOC</p><ul><li>new CNAME for AWS cert validation</li><li>new CNAME for Auth0 cert validation (See https://soap-docs.entapp.northwestern.edu/auths/overview.html for helpful hints using SOAP as the example.)</li><li>DNS entry from ugly cloudfront address to pretty final URL (Note that you do NOT need to send the custom domain that vapor creates.)</li></ul></li><li><p>After the new environment is built and you have the pretty URL back from SOC, don&#39;t forget to add the callback URL to AzureAD console.</p><ul><li>Go to https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/RegisteredApps</li><li>Select the appropriate app.</li><li>Go to &#39;Authentication&#39; and add a Redirect URI call-back.</li><li>Go to &#39;Certificates &amp; Secrets&#39; to confirm a secret from that environment is in place.</li></ul></li></ol><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><p>Deploying an application on Vapor comes with the following limitations.</p><p>These limitations are combination of a serverless architecture &amp; Vapor product decisions:</p>`,9),_=t("<li>API Gateway (HTTP request -&gt; the lambda) has a timeout of 29 seconds</li><li>Lambdas can only run for 15 minutes max <ul><li>Long-running async events dispatched from SQS may need to be cut up if they&#39;re liable to go over the limit</li><li>The same is true for any long-running jobs from the scheduler</li></ul></li><li>App lives in its own dedicated Vapor VPC <ul><li>You can (<em>probably, untested</em>) peer the Vapor VPC with the Northwestern VPC</li><li>But if your app is consuming on-prem services through APIs, this will not be an issue <ul><li>DataHub can help with accessing data from PeopleSoft systems</li></ul></li></ul></li>",3),w={href:"https://docs.vapor.build/1.0/resources/storage.html#file-uploads",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"php.ini",-1),S={href:"https://github.com/laravel/vapor-php-build/blob/master/php74/php.Dockerfile",target:"_blank",rel:"noopener noreferrer"},T=s("li",null,[n("You cannot have a second-level subdomain "),s("ul",null,[s("li",null,[n("Vapor apps must be "),s("code",null,"subdomain.northwestern.edu")]),s("li",null,[n("Using entapp (e.g. "),s("code",null,"subdomain.entapp.northwestern.edu"),n(") will not work")])])],-1),C=s("h2",{id:"best-practices",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#best-practices","aria-hidden":"true"},"#"),n(" Best Practices")],-1),E=s("p",null,[n("The environment variables & secrets for a Laravel app are managed by Vapor. A copy of the "),s("code",null,".env"),n(" file for your Vapor environments should be kept in your app's git repository as "),s("code",null,".env.{vapor-env}"),n(".")],-1),I=s("code",null,"VAPOR_SECRETS",-1),V=t(`<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># These are the env vars for a Vapor environment.</span>
<span class="token comment"># This file is managed in Git, so *DO NOT* put any secrets here.</span>
<span class="token comment"># Secrets must be managed through Jenkins&#39; credential store.</span>

<span class="token key attr-name">APP_DEBUG</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">APP_KEY</span><span class="token punctuation">=</span><span class="token value attr-value">base64:...</span>
<span class="token key attr-name">MAIL_MAILER</span><span class="token punctuation">=</span><span class="token value attr-value">log</span>

<span class="token key attr-name">AN_API_URL</span><span class="token punctuation">=</span><span class="token value attr-value">https://api.dev.northwestern.edu/example-api</span>

<span class="token comment"># The next line is for Jenkins so it knows which secrets to sync to Vapor.</span>
<span class="token key attr-name">VAPOR_SECRETS</span><span class="token punctuation">=</span><span class="token value attr-value">ECATS_API_SYSTEM_USER_KEY,ECATS_API_APIGEE_KEY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=s("code",null,"VAPOR_SECRETS",-1),M=t(`<h2 id="deploying-from-jenkins" tabindex="-1"><a class="header-anchor" href="#deploying-from-jenkins" aria-hidden="true">#</a> Deploying from Jenkins</h2><p>Vapor deployments should be triggered from the Jenkins server.</p><p>This example assumes your Jenkins server has a <code>vapor-api-key</code> credential with the nonprod / prod Vapor team&#39;s API key. It also assumes that your branch names match the environments in <code>vapor.yml</code>.</p><p>You will need both your non-prod &amp; prod project IDs. We recommend putting the non-prod project ID into <code>vapor.yml</code> and substituting it only during prod deployments. To make this example work for production, adjust the IDs on the highlighted lines. Vapor is not built with our nonprod / prod AWS account spit in mind, so every app is two projects split across our nonprod &amp; prod teams, each project getting its own ID. The nonprod ID is part of the <code>vapor.yml</code> file, so when we deploy prod, Jenkins will modify that line and put in the appropriate production Vapor project ID.</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token shebang comment">#!groovy</span>
library identifier<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;AS-jenkins-shared@stable&quot;</span></span><span class="token punctuation">,</span> retriever<span class="token punctuation">:</span> <span class="token function">modernSCM</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">$</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">&#39;GitSCMSource&#39;</span><span class="token punctuation">,</span> credentialsId<span class="token punctuation">:</span> <span class="token string">&#39;GitHub-awsCloudOpsCJT&#39;</span><span class="token punctuation">,</span> remote<span class="token punctuation">:</span> <span class="token string">&#39;https://github.com/NIT-Administrative-Systems/AS-jenkins-shared.git&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

pipeline <span class="token punctuation">{</span>
    agent any

    environment <span class="token punctuation">{</span>
        TEAMS_WEBHOOK_URL <span class="token operator">=</span> <span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">&#39;teams-build-webhook&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    triggers <span class="token punctuation">{</span>
        <span class="token function">pollSCM</span><span class="token punctuation">(</span><span class="token string">&#39;H/10 * * * *&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>


    options <span class="token punctuation">{</span>
        <span class="token function">disableConcurrentBuilds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    stages <span class="token punctuation">{</span>
        stage <span class="token punctuation">(</span><span class="token string">&#39;Send Notifications&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                office365ConnectorSend status<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;Started&quot;</span></span><span class="token punctuation">,</span> webhookUrl<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>TEAMS_WEBHOOK_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        stage <span class="token punctuation">(</span><span class="token string">&#39;Test and Deploy&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            agent <span class="token punctuation">{</span>
                docker <span class="token punctuation">{</span>
                    image <span class="token string">&#39;edbizarro/gitlab-ci-pipeline-php:7.4&#39;</span>
                    args <span class="token string">&#39;-u root:root&#39;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            stages <span class="token punctuation">{</span>
                stage <span class="token punctuation">(</span><span class="token string">&#39;Test Mix&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    steps <span class="token punctuation">{</span>
                        sh <span class="token string">&#39;yarn install&#39;</span>
                        sh <span class="token string">&#39;yarn run prod&#39;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                stage <span class="token punctuation">(</span><span class="token string">&#39;Test App&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    steps <span class="token punctuation">{</span>
                        sh <span class="token string">&#39;composer install&#39;</span>
                        sh <span class="token string">&#39;cp .env.example .env &amp;&amp; php artisan key:generate&#39;</span>
                        sh <span class="token string">&#39;./vendor/bin/phpunit --coverage-text --color=never&#39;</span>
                        sh <span class="token string">&#39;rm .env&#39;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                stage <span class="token punctuation">(</span><span class="token string">&#39;Deploy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    when <span class="token punctuation">{</span>
                        anyOf <span class="token punctuation">{</span>
                            branch <span class="token string">&#39;develop&#39;</span>
                            branch <span class="token string">&#39;qa&#39;</span>
                            branch <span class="token string">&#39;production&#39;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    steps <span class="token punctuation">{</span>
                        script <span class="token punctuation">{</span>
                            GIT_COMMIT<span class="token operator">=</span><span class="token function">checkout</span><span class="token punctuation">(</span>scm<span class="token punctuation">)</span><span class="token punctuation">.</span>GIT_COMMIT
                        <span class="token punctuation">}</span>

                        sh <span class="token string">&#39;composer global require --prefer-dist --no-ansi --no-interaction --no-progress laravel/vapor-cli&#39;</span>

                        <span class="token comment">// Hack to support using two Vapor teams -- the project ID differs between non-prod and prod</span>
                        sh <span class="token interpolation-string"><span class="token string">&quot;[ \\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">BRANCH_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot; = &#39;production&#39; ] &amp;&amp; sed -i &#39;s/id: 1234/id: 5678/&#39; vapor.yml || true&quot;</span></span>

                        <span class="token function">withCredentials</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>credentialsId<span class="token punctuation">:</span> <span class="token string">&#39;vapor-api-key&#39;</span><span class="token punctuation">,</span> variable<span class="token punctuation">:</span> <span class="token string">&#39;VAPOR_API_TOKEN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token function">publishSecretsToVapor</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">BRANCH_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            sh <span class="token string">&#39;&#39;&#39;export PATH=\\$PATH:\\$COMPOSER_HOME/vendor/bin/ &amp;&amp;
                            vapor env:push \${BRANCH_NAME} &amp;&amp;
                            vapor deploy --no-ansi \${BRANCH_NAME} --commit=&#39;\${GIT_COMMIT}&#39;
                            &#39;&#39;&#39;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    post <span class="token punctuation">{</span>
        success <span class="token punctuation">{</span>
            office365ConnectorSend status<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;Success!&quot;</span></span><span class="token punctuation">,</span> webhookUrl<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>TEAMS_WEBHOOK_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span>

        failure <span class="token punctuation">{</span>
            office365ConnectorSend status<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;Failed&quot;</span></span><span class="token punctuation">,</span> webhookUrl<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>TEAMS_WEBHOOK_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function R(O,q){const e=p("ExternalLinkIcon"),i=p("RouterLink");return r(),c("div",null,[d,s("p",null,[s("a",v,[n("Laravel Vapor"),a(e)]),n(" is the deployment tool of choice for Laravel applications. This is a SaaS orchestration tool that will deploy a serverless web applciation on AWS. All of the necessary AWS infrastructure will be created for you by Vapor, making this a fast & easy way to get your application deployed.")]),s("p",null,[n("A full explanation of what Vapor provides is available "),s("a",m,[n("in their documentation"),a(e)]),n(".")]),b,h,s("p",null,[n("We have structured our Vapor account "),a(i,{to:"/infrastructure/aws-account-design.html"},{default:o(()=>[n("similar to AWS")]),_:1}),n(": a nonprod team and a prod team, each tied to the matching AWS account. This does require creating an application's project in both teams, which gives them different project IDs.")]),k,s("p",null,[n("Review the "),s("a",g,[n("Vapor documentation"),a(e)]),n(" for more information on Vapor-izing your app, what AWS resources are natively supported, and how to configure your "),f,n(" file.")]),y,s("ul",null,[_,s("li",null,[n("File uploads must be "),s("a",w,[n("done through S3"),a(e)])]),s("li",null,[n("You cannot customize what PHP extensions are loaded, what binaries are available, or the "),A,s("ul",null,[s("li",null,[n("See the "),s("a",S,[n("vapor-php-build"),a(e)]),n(" repository to see what the Vapor runtime includes")])])]),T]),C,E,s("p",null,[n("According to our "),a(i,{to:"/infrastructure/secrets.html"},{default:o(()=>[n("secrets management strategy")]),_:1}),n(", env variables like credentials & API keys should not be kept in this file; instead, define a "),I,n(" env var and set it to a comma-separated list of secret names:")]),V,s("p",null,[n("The Jenkins pipeline below will utilize the "),x,n(" variable to sync secrets from the Jenkins credential store to Vapor. Instructions on adding your secrets to the Jenkins credential store may be found "),a(i,{to:"/infrastructure/secrets.html#jenkins-setup"},{default:o(()=>[n("here, under the Jenkins Setup header")]),_:1}),n(" -- but the other steps (Terraform setup, Jenkins) in that article are not applicable to Vapor deployments.")]),M])}const D=l(u,[["render",R],["__file","vapor.html.vue"]]);export{D as default};
