import{_ as e,p as a,q as s,a1 as t}from"./framework-bf3e1922.js";const n={},r=t(`<h1 id="as-terraform-modules" tabindex="-1"><a class="header-anchor" href="#as-terraform-modules" aria-hidden="true">#</a> AS Terraform Modules</h1><p>A collection of resources can be grouped into a terraform module, and the module can be invoked multiple times. This can be leveraged to declare all your infrastructure for an application in a <em>base module</em>, and then run that module (with some different variables) for dev, QA, and production.</p><p>Administrative Systems generally creates a folder structure like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── base_module
│   ├── sns.tf
│   ├── output.tf
│   └── variables.tf
├── dev
│   ├── provider.tf
│   ├── state.tf
│   └── main.tf
└── qa
    ├── provider.tf
    ├── state.tf
    └── main.tf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll notice that the <code>provider.tf</code> and <code>state.tf</code> files move out to the environment. The <code>sns.tf</code> file in the <code>base_module</code> has the SNS topic and subscription from our last example, but there are two new files: <code>variables.tf</code>, which declares what arguments our <em>base module</em> has, and <code>outputs.tf</code>, which has its <em>attributes</em>.</p><div class="hint-container tip"><p class="hint-container-title">Terraform Files</p><p>Terraform is run for a given folder. It will evaluate all of the <code>*.tf</code> files in that folder as one module.</p><p>This means you can split your resources up across as many files as you like. We generally split them by service, e.g. <code>sns.tf</code> has the SNS config.</p><p>We keep the <code>state.tf</code>, <code>variables.tf</code>, <code>provider.tf</code>, and <code>output.tf</code> in their own files. Otherwise, there are no rules -- you can split the infrastructure resources across as many (or few) files as makes sense for your project.</p></div><p>The <code>main.tf</code> for the development environment would look like this:</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token keyword">module<span class="token type variable"> &quot;opsgenie_alert&quot; </span></span><span class="token punctuation">{</span>
    <span class="token property">source</span> <span class="token punctuation">=</span> <span class="token string">&quot;../base_module&quot;</span>

    <span class="token comment"># These would be declared in the base_module&#39;s variables.tf</span>
    <span class="token property">environment</span> <span class="token punctuation">=</span> <span class="token string">&quot;development&quot;</span>
    <span class="token property">team_name</span>   <span class="token punctuation">=</span> <span class="token string">&quot;MyTeam&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures consistency between environments. The dev environment <em>must</em> be similar to the QA environment, because they are built using the exact same terraform module.</p><p>Modules are very powerful: you can nest modules and have them interact with each other via their outputs, include shared module code from Github repositories, and access the Terraform state from other IaC projects.</p><h2 id="sharing-resources" tabindex="-1"><a class="header-anchor" href="#sharing-resources" aria-hidden="true">#</a> Sharing Resources</h2><p>The AS Cloud Services team will create and manage shared resources in your account -- things like an ALB, IP subnets, and the VPC. There will be one repository for each department&#39;s AWS accounts, with a base module covering everything the account needs and a sandbox/nonprod/production module to build the resources out in an appropriate manner.</p><p>Developers will need to use some of the attributes for these shared resources in their IaC. For example, running a Lambda in the VPC so it may access resources on campus requires the VPC ID and subnet IDs.</p><div class="hint-container tip"><p class="hint-container-title">New Practice</p><p>The shared resource repository and remote access to state files is a fairly new practice.</p><p>Historically, shared account resources were not created with terraform. VPC IDs/etc were hard coded in each project.</p><p>The AS Cloud Services team is working to import these into terraform. If you find you need an attribute that isn&#39;t available, please let the AS Cloud Services team know!</p></div><p><strong>Declaring a VPC resource in an application&#39;s terraform module would be wrong</strong>: the VPC already exists, and declaring one would try to create a second VPC. Instead, an application would want to declare a remote resource and access information about about the already-created VPC.</p>`,15),o=[r];function i(d,c){return a(),s("div",null,o)}const u=e(n,[["render",i],["__file","as-tf-modules.html.vue"]]);export{u as default};
