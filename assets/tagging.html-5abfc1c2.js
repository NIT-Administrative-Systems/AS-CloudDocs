import{_ as e,M as t,p as o,q as r,R as s,t as a,N as c,a1 as p}from"./framework-bf3e1922.js";const i={},l=s("h1",{id:"tagging-resources",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tagging-resources","aria-hidden":"true"},"#"),a(" Tagging Resources")],-1),u=s("p",null,"AWS allows developers to tag most resources with up to 50 custom key:value pairs. In Administrative Systems, we have two uses for tags: cost breakdown (from the AWS Cost Explorer), and use with IAM/snapshot/bucket ACL policies.",-1),d={href:"https://aws.amazon.com/answers/account-management/aws-tagging-strategies/",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="standard-tags" tabindex="-1"><a class="header-anchor" href="#standard-tags" aria-hidden="true">#</a> Standard Tags</h2><p>We only require two standard tags. All resources that support tagging should have these tags.</p><table><thead><tr><th>Tag Name</th><th>Value</th><th>Purpose</th></tr></thead><tbody><tr><td>Application</td><td>The name of your app, which MUST be consistent across envrionments</td><td>Cost analysis</td></tr><tr><td>Environment</td><td>App environment, like dev/QA/prod</td><td>Cost analysis</td></tr></tbody></table><p>Note that tag names <strong>are case-sensitive</strong>. Take care to use the correct case for our standard tag names.</p><p>Adding these tags across all resources in Terraform is easy:</p><div class="language-hcl line-numbers-mode" data-ext="hcl"><pre class="language-hcl"><code><span class="token comment"># Add a tags.tf file, or put these locals in your variables.tf</span>
<span class="token keyword">locals</span> <span class="token punctuation">{</span> 
    <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span>
        <span class="token property">Application</span> <span class="token punctuation">=</span> var.app_name
        <span class="token property">Environment</span> <span class="token punctuation">=</span> var.env
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token comment"># And then across (almost) all your TF resource blocks:</span>
<span class="token keyword">resource <span class="token type variable">&quot;aws_s3_bucket&quot;</span></span> <span class="token string">&quot;app_code_bucket&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">bucket</span> <span class="token punctuation">=</span> <span class="token string">&quot;my-unique-bucket-name&quot;</span>
  <span class="token property">acl</span>    <span class="token punctuation">=</span> <span class="token string">&quot;private&quot;</span>

  <span class="token property">tags</span> <span class="token punctuation">=</span> local.tags
<span class="token punctuation">}</span>

<span class="token comment"># If you need to add some additional tags, you can still use the local:</span>
<span class="token keyword">resource <span class="token type variable">&quot;aws_s3_bucket&quot;</span></span> <span class="token string">&quot;app_code_bucket&quot;</span> <span class="token punctuation">{</span>
  <span class="token property">bucket</span> <span class="token punctuation">=</span> <span class="token string">&quot;my-unique-bucket-name&quot;</span>
  <span class="token property">acl</span>    <span class="token punctuation">=</span> <span class="token string">&quot;private&quot;</span>

  <span class="token property">tags</span> <span class="token punctuation">=</span> merge(local.tags, <span class="token punctuation">{</span> <span class="token property">LambdaSourceCode</span> <span class="token punctuation">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>)
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can check the Terraform AWS provider documentation for each resource to determine if it supports tags. Alternatively, you can apply tags to every resource and remove them from whatever <code>terraform plan</code> complains about.</p>`,7);function m(k,g){const n=t("ExternalLinkIcon");return o(),r("div",null,[l,u,s("p",null,[a("Beyond our standard tags, developers are free to add additional tags in whatever way makes sense for that application. AWS has some "),s("a",d,[a("ideas on tagging strategies"),c(n)]),a(" for things like clusters & security.")]),v])}const b=e(i,[["render",m],["__file","tagging.html.vue"]]);export{b as default};
